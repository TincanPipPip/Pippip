/**
 * ----------------------
 * Un.titled
 * Helpers - Global mixins
 * ----------------------
 */

// Reset <li> elements
@mixin li-reset {
  list-style: none;
  margin: 0;
  padding: 0;

  li {
    list-style: none;
    margin: 0;
    padding: 0;
  }
}

// Remove text from elements
@mixin rm-text {
  text-align: left;
  text-indent: -9999px;
}

// Background images
@mixin bg-img($size) {
  background-position: center center;
  background-repeat: no-repeat;
  background-size: $size;
}

// IE 9+ only
@mixin ie($property, $value) {
  @media screen and (min-width: 0\0) and (min-resolution: +72dpi) {
    #{$property}: #{$value};
  }
}

/**
 * Clearfix
 * Used to clear float layouts.
 * @return {string}
 */
@mixin clearfix() {
  &:before,
  &:after {
    content: '';
    display: table;
  }

  &:after {
    clear: both;
  }
}

/**
 * Unitless
 * Stripes the unit from a number.
 * @param {number} $number
 * @return {number}
 */
@function unitless($number) {
  @return $number / ($number * 0 + 1);
}

/**
 * Is Relative Unit
 * https://css-tricks.com/snippets/sass/advanced-type-checking/
 * Checks for a relative value.
 * @param {number} $value
 * @return {boolean}
 */
@function is-relative-unit($value) {
  @return is-number($value) and index('em' 'ex' 'ch' 'rem' 'vw' 'vh' 'vmin' 'vmax', unit($value)) != null;
}

/**
 * Has Relative Units
 * https://css-tricks.com/snippets/sass/advanced-type-checking/
 * Checks a map of values for relative units.
 * @param {map} $values
 * @return {boolean}
 */
@function has-relative-units($values: ()) {
  @each $value in $values {
    @if (is-relative-unit($value)) {
      @return true;
    }
  }

  @return false;
}
